#define DBL_MACRO(key) ZMK_MACRO(dbl_##key, bindings = <&kp key &kp key>;)
#define TRI_MACRO(key) ZMK_MACRO(tri_##key, bindings = <&kp key &kp key &kp key>;)
#define DBL_S_MACRO(key) ZMK_MACRO(dbls_##key, bindings = <&kp SPACE &kp key &kp key &kp SPACE>;)
#define BRACKET_S_MACRO(key) ZMK_MACRO(brk_##key, bindings = <&kp L##key &kp R##key &kp LEFT>;)

/ {
    macros {
        // doubles
        DBL_MACRO(UNDER)
        DBL_MACRO(LT)
        DBL_MACRO(GT)
        DBL_MACRO(FSLH)
        DBL_MACRO(BSLH)
        // triples
        TRI_MACRO(SQT)
        TRI_MACRO(DQT)
        TRI_MACRO(DOT)
        TRI_MACRO(EQUAL)
        TRI_MACRO(GRAVE)
        // dbl with space
        DBL_S_MACRO(PIPE)
        DBL_S_MACRO(AMPS)
        DBL_S_MACRO(EQUAL)
        // brackets with left
        BRACKET_S_MACRO(PAR)
        BRACKET_S_MACRO(BKT)
        BRACKET_S_MACRO(BRC)
        // <-
        ZMK_MACRO(arrow_left,        bindings = <&kp LT &kp MINUS>;)
        // ->
        ZMK_MACRO(arrow_right,       bindings = <&kp MINUS &kp GT>;)
        // <=
        ZMK_MACRO(lte,               bindings = <&kp LT &kp EQUAL>;)
        // =>
        ZMK_MACRO(arrow_right_d,     bindings = <&kp EQUAL &kp GT>;)
        // >=
        ZMK_MACRO(gte,               bindings = <&kp GT &kp EQUAL>;)
        // _!=_
        ZMK_MACRO(equals_not,        bindings = <&kp SPACE &kp EXCL &kp EQUAL &kp SPACE>;)
        // {:?}
        ZMK_MACRO(print,             bindings = <&kp LBRC &kp COLON &kp QMARK &kp RBRC>;)
        // {:#?}
        ZMK_MACRO(pprint,            bindings = <&kp LBRC &kp COLON &kp HASH &kp QMARK &kp RBRC>;)
        // https://
        ZMK_MACRO(https,             bindings = <&kp H &kp T &kp T &kp P&kp S &kp COLON &kp FSLH &kp FSLH>;)
    };
};